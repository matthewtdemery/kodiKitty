<?php

// pn - probably can remove since no large db pulls will be used
ini_set('memory_limit', '1G');

// Allow different global variables based on the filename allowing for easy transition between development
// and production settings and operations. Eg. verbose error outputting for dev debugging versus quiet output
// for production operation

$invocation_magic = __FILE__; // Make sure nothing else is going to overwrite
// This file could just be included in this one, however, I have it external for security
include 'kcs.php';

// Set a base timezone, however, the timezone will adjust based on the DID user's preferences
// Will be used in future features such as watch party scheduling
date_default_timezone_set('UTC'); 

// `composer` library integration
include __DIR__.'/vendor/autoload.php';

use Discord\Discord;
use Discord\Parts\User\User;
use Discord\Parts\User\Client;
use Discord\Parts\User\Member;
use Discord\Parts\Guild\Guild;
use Discord\Parts\Channel\Channel;
use Discord\Parts\Channel\Message;
use Discord\Parts\Channel\Reaction;
use Discord\Parts\WebSockets\MessageReaction;
use Discord\WebSockets\Intents;
use Discord\WebSockets\Event;
use Discord\Builders\MessageBuilder;
use Discord\Builders\Components;
use Discord\Builders\Components\ActionRow;
use Discord\Builders\Components\Button;
use Discord\Builders\Components\SelectMenu;
use Discord\Builders\Components\Option;

use YouTube\YouTubeDownloader;
use YouTube\Exception\YouTubeException;

// pn - move to functions script
if (!function_exists('str_contains')) {
  function str_contains($haystack, $needle) {
    return $needle !== '' && mb_strpos($haystack, $needle) !== false;
  }
}

// Send a message to a discord user. 
function sendMsg($id, $msg, $type = 'user', $server = 788607168228229160) {
	$embed = null;
	// If $msg is an array, it contains an embed. 
	if (is_array($msg)) {
		// Split the array. 0 being the message and 1 being the embed
		$embed = $msg[1];
		$msg = $msg[0];
	}
	// Attach the app signature to the end of the message to be sent
	$msg .= "\n".tacoGen();
	
	// bring the current discord loop in
	global $discord;
	
	// adjust destination based on function argument input
	if ( $type == 'channel' ) { 
		$guild = $discord->guilds->get('id', $server);
		$message = $guild->channels->get('id', $id);
	}
	if ( $type == 'user' ) {
		$message = $discord->factory(\Discord\Parts\User\User::class, [
			'id' => $id, //'380675774794956800',
		]);
	}
	if (!$msg) { $msg = "Message is null?"; } 
	$message->sendMessage($msg,false,$embed)->then(function(Message $message) {
		echo "\nMessage sent!\n";
		var_dump($message['id']);
	});
}

// Check to see if a message is a workspace
function checkWorkspace($rdata,$name = '') {
	global $wsLines;

	//$wid = false;
	$wid = $rdata['message_id'];
	$cid = $rdata['channel_id'];
	//$gid = $rdata['guild_id'];
	var_dump('checkWS',$wid,$cid,$name);

	if (in_array($cid,array_keys($wsLines))) {
		var_dump('$wsLines[$cid][$name]');
		//var_dump($wsLines[$cid][$name]);
		var_dump($wsLines[$cid][$name]);
		$name = $wsLines['wsnames'][$cid][$wid];
		if ($wsLines[$cid][$name]['wid'] == $wid) { if ($name == '') { $name =  true; } return $name; }
		
	}


	include('db.php');
	// $data = ['wid' => $wid,'cid' => $cid,'name' => $name];
	$data = ['wid' => $wid,'cid' => $cid];

	// $andgid = '';
		//var_dump($wsLines[$cid][$name]);
	// if ($gid !== NULL) {
		// $andgid = " AND gid=:gid ";
		// $data['gid'] = $gid;
	// }
	$pre = $GLOBALS['filePrefix'];
	$query = "SELECT * FROM `".$pre."workspaces` WHERE cid=:cid AND wid=:wid"; // $andgid";

	var_dump($data);
	$res = $dbconn->prepare($query);
	$res->execute($data);
	if ($results = $res->fetch(PDO::FETCH_ASSOC)) {
		var_dump('$results');
		var_dump($results);
		$dbcid = $results['cid'];
		$dbwid = $results['wid'];
		$dbname = $results['name'];
		// if ($name == $dbname && $wid == $dbwid && $cid == $dbcid) { return true; }
		if ($wid == $dbwid && $cid == $dbcid) { if ($dbname == '') { $dbname =  true; } return $dbname; }
		// return $results['wid'];
	} else {
		var_dump('FALSE $results');
		var_dump($results);
		
		
	}
	
	return false;
	
	
}

// Check if a workspace exists for current channel
function findWorkspace($data,$name = '') {
	$cid = $data['channel_id'];
	$gid = $data['guild_id'];

	$andgid = '';
	$data = ['cid' => $cid,'name' => $name];

	// if ($gid !== NULL) {
		// $andgid = " AND gid=:gid ";
		// $data['gid'] = $gid;
	// }
	$pre = $GLOBALS['filePrefix'];
	$query = "SELECT wid,name FROM `".$pre."workspaces` WHERE cid=:cid AND name=:name"; // $andgid";

	var_dump($data);
	include('db.php');
	$res = $dbconn->prepare($query);
	$res->execute($data);
	$dbname = false;
	$wid = false;
	if ($results = $res->fetch(PDO::FETCH_ASSOC)) {
		var_dump($results);
		$wid = $results['wid'];
		$dbname = $results['name'];
		// return $results['wid'];
	}
	return $wid;
}

// Create or reset a workspace and populate with $output
function initWorkspace($data, $wid = null, $new = false, $output = null, $name = '') {
	$ooutput = $output;
	var_dump('$output 0',$output);

	if ($name == 'player') {
		var_dump('--------------------$data 0',$data);
	}
	
	$reset = false;
	$curwid = null;
	if ($wid == 'reset') {
		$reset = true;
		$wid = null;
	}
	if ($wid == null && !$new) {
		$wid = findWorkspace($data,$name);
		if (!$wid) {
			echo "workspace id not found for channel\n";
			$new = true;
		} else {
			echo "workspace id found! $wid\n";
			$curwid = $wid;
		}
	}
	
	
//			$channel->sendMessage($message, false, $embed);
	$channel = getChannel($data);
	if (!$channel) {
		return "ERR84389743";
	}
	if ($wid) {
		$message = $channel->messages->get('id', $wid);
	}
		var_dump('$reset');
		var_dump($reset);
		var_dump('$output 1',$output);
	if ($reset && !$new) {
		$curwid = $reset = $wid;
	}
	if ($reset && !$new && $output == null) {
		$reset = $wid;
		$message = $channel->messages->get('id', $wid);
		var_dump('$message->content');
		if ($output == NULL && $message !== NULL) { $output = $message->content; }
		if ($output == NULL) { $output = print_r($ooutput,true)." | $reset $wid | msg null?"; }
		$new = true;
	}
		var_dump('$output 2',$output);
	if ($output == null) { $output = "Base Template for Workspace Modules\n".date('Y-m-d H:i:s'); }
	if ($new || $reset) {
		var_dump('$new $reset',$new, $reset);
		// $row = ActionRow::new();
		// $button = $row->addComponent(Button::new(Button::STYLE_SUCCESS))->setLabel('A!')->setListener(function (Interaction $interaction) {
			// $interaction->respondWithMessage(MessageBuilder::new()->setContent('beep'));
		// }, $discord);
		
		
		// $button = $row->addComponent(Button::new(Button::STYLE_SUCCESS))->setLabel('B!');
    // $button->setListener(function (Interaction $interaction) {
    // $interaction->respondWithMessage(MessageBuilder::new()
        // ->setContent('boop'));
		// }, $discord);

		$channel->sendMessage(splitMsg($output)[0])->then(function (Message $message) use ($data,$output,$reset,$curwid,$name) {
			$wid = $message['id'];
			$cid = $message['channel_id'];
			$gid = $message['guild_id'];
  // $query = "INSERT INTO users(`user`, `character`, `homeworld`, `defaultprofile`, `dc`, `discord`, `did`, `verify`, `approved`) 
	// VALUES (:user, :character, :homeworld, :defaultprofile, :dc, :discord, :did, :verify, :approved)";
			//$message->react(':arrow_left:');
			//$message->react(':arrow_right:');


			include('db.php');
			$pre = $GLOBALS['filePrefix'];
			$query = "INSERT INTO `".$pre."workspaces` (`wid`,`cid`,`gid`,`name`) VALUES (:wid,:cid,:gid,:name) ON DUPLICATE KEY UPDATE wid=:wid";
      // $query = "INSERT INTO ip (ip, count, username) VALUES(:ip, 1, :username) ON DUPLICATE KEY UPDATE count = count + 1";

			// if ($name == 'player' && $new) { var_dump($query,$wid,$new,$name,'BBBBBBBBBBB'); exit; }
			//if ($reset) { $query = "UPDATE ".$pre."workspaces SET `wid`=:wid,`cid`=:cid,`gid`=:gid WHERE `cid`=:cid;"; }
			// $data = ['cid' => $cid,'gid' => $gid,'wid' => $wid];
			// $data = ['cid' => $cid,'gid' => $gid,'wid' => $wid];
			echo "saving workspace data\n";
			//global $dbconn;
				// echo "s98fd7s09d8yf0s8yf0s98ssssssssssssssssssssssssssssssssssssssss";
			$res = $dbconn->prepare($query);
				echo "s98fd7s09d8yf0s8yf0s98ssssssssssssssssssssssssssssssssssssssss";
			$err = 0;
			var_dump("===================== WID $curwid | $reset | $wid =================================");

			$wsarrname = 'playlist';
			if ($name == 'player') {
				global $lastStatusData;
				var_dump('6666666666666666666666666666666666666666666',$lastStatusData,$data);
				$lastStatusData = $data;
				$wsarrname = 'player';
			}
			foreach ($GLOBALS[$wsarrname.'Array'] AS $emotename => $emote) {
				$message->react($emote);
			}
			// $message->react('âž¡');
			if (!$status = $res->execute(['cid' => $cid,'gid' => $gid,'wid' => $wid,'name'=>$name])) {
				echo "88888888888888888888888888888888888888888888888eeeeer66";
				
				$err = 1;
				
			} else if ($reset) {
				$channel = getChannel($data);
					var_dump("WID $wid =================================");
				// $channel->getMessage($reset)->done( function ($oldMsg) use ($reset) {
				
				$channel->messages->fetch($reset)->then(function (Message $oldMsg) use ($reset) {
					var_dump("delete $reset =================================");
					$oldMsg->delete()->then(function () {
						var_dump("delete 0000000000000000=================================");
					});
				});
				// })->done();
				
				
				// $channel->messages->get($reset)->then( function ($oldMsg) use ($reset) {
					//$oldMsg->channel->delete(); //Message($pinnedMsg, $output);
				// });
			}
			if ($output !== null) { outputWorkspace($data,$output,$name); }


			//global $discord;
			// $nchan = $discord->getChannel($cid);
			// sendReply($data, "$wid $cid $gid | ".$err);
			// $message->channel->editMessage($message, "$output $wid $cid $gid");
		});
	} else {
		$output = "UPDATED!!!!!! $output";
		$channel = getChannel($data);
		// $channel->getMessage($msg->id)




		// $message = $channel->getMessage($wid);
				// var_dump("111111111111111STATUS");
				// var_dump($channel);
				// var_dump($message);
		// global $discord;
		// $message = $discord->factory(\Discord\Parts\Channel\Message::class, [
			// 'id' => $wid, //'380675774794956800',
		// ]);
				// var_dump("AAAAAAAAAAAAASTATUS");
				// var_dump($message);

		// var_dump("STATUS",$message,$wid);
		outputWorkspace($data,$output,$name);
	// $channel->getMessage($wid)->done( function ($pinnedMsg) use ($output) {
		// $pinnedMsg->channel->editMessage($pinnedMsg, $output);
  // });
		// if ($message == NULL) {
			// $channel->messages->fetch($wid)->done(function (Message $message) use ($output) {
				// var_dump("STATUS");
				// // var_dump($message);
				// $message->channel->editMessage($message, $output);
			// });
		// } else {
				// $message->channel->editMessage($message, $output);
		// }
	}
}

$wsLines = [];
$wsLines['wsnames'] = [];

// Pagination action for workspaces
function wsPages($data,$lines = '',$pag = 0,$name = '') {
	global $wsLines;
	var_dump('$wspages9099999999999999999',$pag);
	//var_dump('$wsLines',$wsLines);
	$channel = getChannel($data);
	$cid = $data['channel_id'];

	$crc = $total = null;
	$wid = findWorkspace($data,$name);
