}

}

// Prepare messages for discord character limit
function splitMsg($message) {
	if (is_array($message)) {
		return $message;
	}
	$lines = null;
	if (strlen($message) > 2000) {
		$x = 1990;
		// $longString = 'I like apple. You like oranges. We like fruit. I like meat, also.';
		// $message = str_replace("\n","LINEBREAK",$message);
		$message = str_replace(" ","===SPACE===",$message);
		$message = str_replace("\n"," ",$message);
		$message = wordwrap($message, $x,'===LINEBREAK===');
		$message = str_replace(" ","\n",$message);
		// $message = str_replace('===LINEBREAK===',"\n",$message);
		$message = str_replace("===SPACE===",' ',$message);
		$lines = explode('===LINEBREAK===', $message);
	} else {
		$lines = [$message];
	}
	return $lines;
}

// Reply to received message
function sendReply($data, $message = '', $embed = NULL) {
	// var_dump($embed);
	
	if (!$message && !$embed) { return;}

	if (filter_var($message, FILTER_VALIDATE_URL) === false) {
		$message .= " ".tacoGen();
	}
	// $lines = null;
	// if (strlen($message) > 2000) {
		// $x = 1990;
		// // $longString = 'I like apple. You like oranges. We like fruit. I like meat, also.';
		// // $message = str_replace("\n","LINEBREAK",$message);
		// $message = str_replace(" ","===SPACE===",$message);
		// $message = str_replace("\n"," ",$message);
		// $message = wordwrap($message, $x,'===LINEBREAK===');
		// $message = str_replace(" ","\n",$message);
		// // $message = str_replace('===LINEBREAK===',"\n",$message);
		// $message = str_replace("===SPACE===",' ',$message);
		// $lines = explode('===LINEBREAK===', $message);
	// } else {
		// $lines = $message;
	// }
	$lines = splitMsg($message);


	global $discord;
	$channel = getChannel($data);
	if ($channel == NULL) {
		// var_dump($data);
		return;
	}

	// if(is_numeric($data)) {
		// $channel = $discord->factory(\Discord\Parts\User\User::class, [
			// 'id' => preg_replace("/[^0-9]/", "", $data), //'380675774794956800',
		// ]);
	// } else if($data->channel->guild_id === NULL) { 
		// $channel = $discord->factory(\Discord\Parts\User\User::class, [
			// 'id' => preg_replace("/[^0-9]/", "", $data->user), //'380675774794956800',
		// ]);
	// //}
	// } else {
		// $guild = $discord->guilds->get('id', $data['guild_id']);
	  // $channel = $guild->channels->get('id', $data['channel_id']); 
	// }
	$index = 0;
	if (!is_array($lines)) {
		$lines = [$lines];
	}
	foreach ($lines AS $message) {
		// $message = str_replace("===SPACE==="," ",$message);
		$index++;
		// var_dump($message);
		if ($index == count($lines)) {
			$channel->sendMessage($message, false, $embed)->then(function(Message $message) {
				echo "\nMessage sent!\n";
				// var_dump($message);
				return;
						// global $discord;
					// $discord->close();
					// exit;
			// })->then(function($problem) {
				// error_log($problem); 
			});
		} else {
				$channel->sendMessage($message)->then(function(Message $message) {
					echo "\nMessage sent!\n";
					// var_dump($message);
					return;
						// global $discord;
					// $discord->close();
					// exit;
				// })->then(function($problem) {
					// error_log($problem); 
				});
			// } else {
				// $channel->sendMessage($message);
			// };
		}
	}
	// } else {
		// $channel->sendMessage($message, false, $embed)->then(function(Message $message) {
			// echo "\nMessage sent!\n";
			// var_dump($message);
			// return;
							// // global $discord;
						// // $discord->close();
						// // exit;
					// // })->then(function($problem) {
						// // error_log($problem); 
		// });
	// }
	unset($embed);
}

// Cheap AI chatbot. So so cheap....
if (!$chatbot = json_decode(file_get_contents('chatbot.json'),true)) {
	$chatbot = ['uid'=> '887d79e5bbec1ee2','sid'=> []];
	file_put_contents('chatbot.json',json_encode($chatbot));
}

function chatBot($arg,$did) {
	global $chatbot;
	$return = [];
	// return "Not yet";
	if (!isset($chatbot['sid'][$did]) || !$chatbot['sid'][$did] ) {
		$chatbot['sid'][$did] = false;
		file_put_contents('chatbot.json',json_encode($chatbot));
	//}
	//if (!isset($chatbot['sid']) || !isset($chatbot['uid'])) {

		$post = [
			'uid' => '887d79e5bbec1ee2',
			'intro' => true
		];
		$response = curl('https://kuli.kuki.ai/cptalk', http_build_query($post));

		$json = false;
		if (isset($response['content'])) {
			$json = json_decode($response['content'],true);
		}
		if (!$json || !isset($json['responses']) || 0 === count($json['responses'])) {
			var_dump($response,$json,$chatbot);
			return "Error 56";
		}

		$chatbot['sid'][$did] = $json['sessionid'];
		file_put_contents('chatbot.json',json_encode($chatbot));
		var_dump($response,$json,$chatbot);
		// return "Error 542";
		$return = array_merge($return, array_map('strip_tags_content',    $json['responses']));
	}
	//return $json['responses'];


		//$chatbot['uid'] = $json['uid'];
	$sid = $chatbot['sid'][$did];
	$uid = $chatbot['uid'];
	$post = [		'uid'=>$uid,		'input'=>$arg,		'sessionid'=>$sid	];
	$response = curl('https://kuli.kuki.ai/cptalk', http_build_query($post));
	//curl('https://kuli.kuki.ai/cptalk',"uid=887d79e5bbec1ee2&intro=true");
	if (isset($response['content'])) {
		$json = json_decode($response['content'],true);
	}
	if (!$json ||!isset($json['responses']) || !count($json['responses'])) {
		var_dump($response,$json,$chatbot);
		return "Error 57";
	}
	// return array_map('strip_tags_content',    $json['responses']);
	$return = array_merge($return, array_map('strip_tags_content',    $json['responses']));
	array_walk($return, function(&$value, $key) use($did) { $value = "<@$did>, ".$value; } );
	return $return;
	//return $json['responses'];
}

// Prepare output for discord
function strip_tags_content($text) {
  return preg_replace('@<(\w+)\b.*?>.*?</\1>@si', '', $text);
}

function validVideoId($id) {
	return !!(getimagesize("http://img.youtube.com/vi/$id/mqdefault.jpg")[0]);
}

function curl( $url,$curl_data = null,$username = false ) {
	// global $user;
	// if (!$username) {
		// $username = $user;
	// }
  $options = array(
    CURLOPT_RETURNTRANSFER => true,         // return web page
    CURLOPT_HEADER         => false,        // don't return headers
    CURLOPT_FOLLOWLOCATION => true,         // follow redirects
    CURLOPT_ENCODING       => "",           // handle all encodings
    CURLOPT_USERAGENT      => "Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0",     // who am i
    CURLOPT_AUTOREFERER    => true,         // set referer on redirect
    CURLOPT_CONNECTTIMEOUT => 120,          // timeout on connect
    CURLOPT_TIMEOUT        => 120,          // timeout on response
    CURLOPT_MAXREDIRS      => 10,           // stop after 10 redirects
    CURLOPT_SSL_VERIFYHOST => 2,            // don't verify ssl
    CURLOPT_SSL_VERIFYPEER => true,        //
    CURLOPT_VERBOSE        => 0                //
  );
  $ch = curl_init($url);
  curl_setopt_array($ch,$options);
	if ($curl_data != null) {
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $curl_data);
	}

  // curl_setopt( $ch, CURLOPT_COOKIEJAR,  'wft-'.$username.'.cookies');
  // curl_setopt( $ch, CURLOPT_COOKIEFILE, 'wft-'.$username.'.cookies' );
		
  $ret['content'] = curl_exec($ch);
  $ret['err']     = curl_errno($ch);
  $ret['errmsg']  = curl_error($ch) ;
  $ret['header']  = curl_getinfo($ch);
  curl_close($ch);
  //  $header['errno']   = $err;
  //  $header['errmsg']  = $errmsg;
  //  $header['content'] = $content;
  return $ret;
}

function getLineWithString($lines, $str) {
    if (!is_array($lines)) {
			$lines = explode("\n",$lines);
		}
		// $lines = file($fileName);
    foreach ($lines as $lineNumber => $line) {
        if (strpos($line, $str) !== false) {
            return $line;
        }
    }
    return -1;
}

function percentage($partialValue, $totalValue, $round = true) {
  $val = ($partialValue / $totalValue)*100; //*100);
	$rval = $val;
	if ($round) { $rval = round($val); }
	if ($rval == 100 && $val != 100 && $round) {
		//$val = $rval; }
		return $val;
	} else if ($round) {
		return $rval;
	} else {
		return $val;
	}
}

$acct = [];
$timezone = "UTC";

function duration($odate, $cdate) {
	$extraday = 0;
	if ($odate > $cdate) {$extraday = 1; }
	$start_date = new DateTime($odate);
	$end_date = new DateTime($cdate);
	$end_date->modify("+$extraday day");
	$since_start = $start_date->diff($end_date);
	$minutes = $since_start->h * 60;
	$minutes += $since_start->i;
	return $minutes;
}

function human_time_diff($time,$now = '',$cprefix = false) {
		global $timezone;
		$return = [];
		date_default_timezone_set($timezone);
		if ($now == '') { 
			$now = new \DateTime();
		} else if (is_string($now)) { 
			$now = new \DateTime($now); 
		}
		if (is_string($time)) { 
			$time = new \DateTime($time); 
		}
		$when = $time->format('Y-m-d');
		$interval = $now->diff($time);

		$yesterday = new \DateTime();
		$yesterday = $yesterday->sub(new DateInterval('P1D'))->format('Y-m-d');
		$tomorrow = new \DateTime();
		$tomorrow = $tomorrow->add(new DateInterval('P1D'))->format('Y-m-d');
		$yestermorrow = '';
		if ($yesterday == $when) {$yestermorrow = 'yesterday '; }
		if ($tomorrow == $when) {$yestermorrow = 'tomorrow '; }

		$prefix = '';
		$suffix = '';
			// $interval = date_create('now')->diff( $datetime );
			if ($cprefix) { $prefix = $cprefix; } else 
			{
				$suffix = ( $interval->invert ? ' ago' : '' );
				$prefix = ( $interval->invert ? '' : 'in ' );
			}
			if ( $v = $interval->y >= 1 ) $return[] = pluralize( $interval->y, 'year' );
			if ( $v = $interval->m >= 1 ) $return[] = pluralize( $interval->m, 'month' );
			if ( $v = $interval->d >= 1 ) $return[] = pluralize( $interval->d, 'day' );
			if ( $v = $interval->h >= 1 ) $return[] = pluralize( $interval->h, 'hour' );
			if ( $v = $interval->i >= 1 || count($return) == 0 ) $return[] = pluralize( $interval->i, 'minute' );
			//$return[] = pluralize( $interval->i, 'minute' );
			// $return[] = pluralize( $interval->s, 'second' );
			return $yestermorrow.$prefix.niceList($return).$suffix;
	}

function pluralize( $count, $text ) {
		return $count . ( ( $count == 1 ) ? ( " $text" ) : ( " ${text}s" ) );
	}

function reducearray($array) {
	foreach ($array AS $data => $index) {
		$index = array_intersect_key($index, array_unique(array_map('serialize', $index)));
		$narray[$data] = $index;
	}
	return $narray;
}

$edataset = [];

require("phpKodi-api.php");

function cacheYTNames($dir) {
	//array_unshift($dir,);
	if ($kerr = kodiError($dir)) { return $kerr; }

	file_put_contents('ytnames.json',json_encode($dir, JSON_PRETTY_PRINT));
	global $_Kodi;
	global $ytmap;
	$ndir = ['ytparsed'=>true];
	$page = 1;
	$nextpage = false;
	while ($page < 4 && !isset($dir['error'])) {
 		$files = $dir;
		if (isset($dir['result'])) {
			$files = $dir['result']['files'];
		} else	if (isset($dir['files'])) {
			$files = $dir['files'];
		}
		foreach ($files AS $key => $item) {
			$filename = $item['file'];
			$type = $item['filetype'];
			// if ($type == 'file') {
			// }
			$file = false;
			if (isset($item['mediapath'])) {
				$file = $item['mediapath'];
			}
			if (!$file) { $file = $filename; }
			$file = stripslashes($file);
			$artist = [];
			if (isset($item['artist'])) {
				$artist = $item['artist'];
			}
			$